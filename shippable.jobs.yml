jobs:
  - name: meta-zephyr-sdk_runCI
    type: runCI
    steps:
      - IN: meta-zephyr-sdk_ciRepo

  - name: create_sdk_ng
    type: runSh
    steps:
      - IN: s3-token-simple
      - IN: sdk-ng_ciRepo
      - IN: sdk-ng_runCI
      - IN: github_token
      - TASK:
        - script: |
            test -f /build/IN/sdk-ng_runCI/runCI/sdk.env && . /build/IN/sdk-ng_runCI/runCI/sdk.env;
            cat /build/IN/sdk-ng_runCI/runCI/sdk.env;
            if [ -n "${GIT_TAG_NAME}" ]; then
              export S3_PATH="s3://incoming.zephyrproject.org/sdk-ng/${SDKNG_CIREPO_VERSIONNUMBER}";
              sudo apt-get install -y makeself p7zip-full cpio tree;
              sudo pip install awscli;
              mkdir -p toolchains;
              aws s3 sync --quiet ${S3_PATH}/ toolchains;
              dirname="zephyr-sdk-ng-$GIT_TAG_NAME"
              filename="${dirname}.tar.bz2"
              mkdir -p ${dirname};
              pushd toolchains;
              for f in *.tar.bz2; do
                echo "Uncompressing ${f}..."
                tar xf $f;
              done;
              cd  build/;
              mv output/* ../../${dirname}/;
              cd ..
              popd;
              echo "Compressing archive..."
              tar jcf ${filename} ${dirname}
              echo "Uploading to S3"
              aws s3 cp ${filename} ${S3_PATH}/final/${filename}
              echo "SDK file name: ${filename}"
              if [ "${IS_PRERELEASE}" = "true" -o "${IS_RELEASE}" = "true" ]; then
                # Define variables.
                GH_API="https://api.github.com"
                GH_REPO="$GH_API/repos/zephyrproject-rtos/sdk-ng"
                GH_TAGS="$GH_REPO/releases/tags/$GIT_TAG_NAME"
                AUTH="Authorization: token $GH_TOKEN"
                WGET_ARGS="--content-disposition --auth-no-challenge --no-cookie"
                CURL_ARGS="-LJO#"

                # Validate token.
                curl -o /dev/null -sH "$AUTH" $GH_REPO || { echo "Error: Invalid repo, token or network issue!";  exit 1; }

                # Read asset tags.
                response=$(curl -sH "$AUTH" $GH_TAGS)

                # Get ID of the asset based on given filename.
                eval $(echo "$response" | grep -m 1 "id.:" | grep -w id | tr : = | tr -cd '[[:alnum:]]=')
                [ "$id" ] || { echo "Error: Failed to get release id for tag: $tag"; echo "$response" | awk 'length($0)<100' >&2; exit 1; }

                # Upload asset
                echo "Uploading asset ${filename}... "
                # Construct url
                GH_ASSET="https://uploads.github.com/repos/zephyrproject-rtos/sdk-ng/releases/$id/assets?name=\"$(basename $filename)\""
                echo ${GH_ASSET}
                curl --data-binary @"${filename}" -H "Authorization: token $GH_TOKEN" -H "Content-Type: application/octet-stream" ${GH_ASSET}
              fi
            fi

  - name: create_sdk
    type: runSh
    steps:
      - IN: s3-token-simple
      - IN: meta-zephyr-sdk_ciRepo
      - IN: meta-zephyr-sdk_runCI
      - IN: github_token
      - TASK:
        - script: |
            test -f /build/IN/meta-zephyr-sdk_runCI/runCI/sdk.env && . /build/IN/meta-zephyr-sdk_runCI/runCI/sdk.env;
            cat /build/IN/meta-zephyr-sdk_runCI/runCI/sdk.env;
            if [ -n "${GIT_TAG_NAME}" ]; then
              export S3_PATH="s3://incoming.zephyrproject.org/sdk/${METAZEPHYRSDK_CIREPO_VERSIONNUMBER}";
              sudo apt-get install -y makeself p7zip-full cpio tree;
              sudo pip install awscli;
              aws s3 sync ${S3_PATH}/toolchains/ toolchains;
              chmod +x toolchains/*.sh;
              cp toolchains/make_zephyr_sdk.sh toolchains/template_dir .;
              sh ./make_zephyr_sdk.sh;
              aws s3 cp zephyr-sdk* ${S3_PATH}/;
              filename="zephyr-sdk-$GIT_TAG_NAME-setup.run"
              echo "SDK file name: ${filename}"
              if [ "${IS_PRERELEASE}" = "true" -o "${IS_RELEASE}" = "true" ]; then
                # Define variables.
                GH_API="https://api.github.com"
                GH_REPO="$GH_API/repos/zephyrproject-rtos/meta-zephyr-sdk"
                GH_TAGS="$GH_REPO/releases/tags/$GIT_TAG_NAME"
                AUTH="Authorization: token $GH_TOKEN"
                WGET_ARGS="--content-disposition --auth-no-challenge --no-cookie"
                CURL_ARGS="-LJO#"

                # Validate token.
                curl -o /dev/null -sH "$AUTH" $GH_REPO || { echo "Error: Invalid repo, token or network issue!";  exit 1; }

                # Read asset tags.
                response=$(curl -sH "$AUTH" $GH_TAGS)

                # Get ID of the asset based on given filename.
                eval $(echo "$response" | grep -m 1 "id.:" | grep -w id | tr : = | tr -cd '[[:alnum:]]=')
                [ "$id" ] || { echo "Error: Failed to get release id for tag: $tag"; echo "$response" | awk 'length($0)<100' >&2; exit 1; }

                # Upload asset
                echo "Uploading asset ${filename}... "

                # Construct url
                GH_ASSET="https://uploads.github.com/repos/zephyrproject-rtos/meta-zephyr-sdk/releases/$id/assets?name=$(basename $filename)"
                echo ${GH_ASSET}

                curl --data-binary @"$filename" -H "Authorization: token $GH_TOKEN" -H "Content-Type: application/octet-stream" $GH_ASSET
              fi
            fi


  - name: ci-test_runCI
    type: runCI
    steps:
      - IN: daily-verify
      - IN: daily-verify-arm
      - IN: ci-test_ciRepo
      - IN: s3-token

  - name: zephyr_runCI
    type: runCI
    steps:
      - IN: zephyr_ciRepo
      - IN: s3-token-simple
      - IN: codecov

  - name: zephyr-testing_runCI
    type: runCI
    steps:
      - IN: zephyr-testing_ciRepo
      - IN: s3-token-simple
      - IN: codecov_testing

  - name: zephyr-daily-doc
    type: runSh
    steps:
      - IN: s3-token
      - IN: main_repo
        switch: off
      - IN: ci_test_repo
        switch: off
      - IN: docs_theme_repo
        switch: off
      - IN: daily-docs
      - TASK:
          name: daily_docs
          runtime:
            container: true
            options:
              imageName: zephyrprojectrtos/ci
              imageTag: v0.4-rc12
              pull: true
              options: "--privileged=true --tty --net=bridge"
          script:
            - . /build/IN/ci_test_repo/gitRepo/scripts/build-docs.sh

  - name: zephyr-checks
    type: runSh
    steps:
      - IN: github_token
      - IN: testing_repo
        showBuildStatus:  false
      - TASK:
          name: checks
          runtime:
            container: true
            options:
              imageName: zephyrprojectrtos/ci
              imageTag: v0.4-rc12
              pull: true
              options: "--privileged=true --tty --net=bridge"
          script:
            - pip3 install PyGithub junitparser
            - ls -la IN/
            - cd IN/testing_repo/gitRepo
            - git fetch origin pull/${TESTING_REPO_PULL_REQUEST}/head
            - git checkout -f FETCH_HEAD
              #- git merge -q origin/${TESTING_REPO_BRANCH}
              #- git rebase origin/${TESTING_REPO_BASE_BRANCH};
            - source zephyr-env.sh
            - export COMMIT_RANGE=origin/${TESTING_REPO_BASE_BRANCH}..HEAD
            - echo "Building a Pull Request";
            - echo "Building Documentation";
            - echo "Commit range:" ${COMMIT_RANGE}
            - >
              make htmldocs;
              if [ "$?" != "0" ]; then
                echo "Documentation build failed";
                exit 1;
              fi
            - >
              if [ -s doc/doc.warnings ]; then
                echo " => New documentation warnings/errors";
                cp doc/doc.warnings doc.warnings
              fi;
            - ./scripts/ci/check-compliance.py --commits ${COMMIT_RANGE} -g -p ${TESTING_REPO_PULL_REQUEST} -r ${TESTING_REPO_REPO_FULL_NAME}
